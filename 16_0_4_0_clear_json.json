{
  'writejson.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/writejson.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport json, os\n\n\ndef write_json(path, data):\n    with open(path, 'w') as f:\n        if isinstance(data, dict):\n            f.write(json.dumps(data))\n        else:\n            pass\n    return True\n\n\ndef read_json(path):\n    with open(path, 'r') as f:\n        data = f.readlines()\n        ss = ''\n        for x in data:\n            line = x.strip()\n            if line != '':\n                print(line)\n                ss += line\n    return json.loads(ss)\n\n\ndata = {'name': '小郭 ',\n        'age': 26}\n# write_json('test.json', data)\n\nresult = read_json('test.json')\nprint('结果为', result)\n"
  },
  'yaml_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/yaml_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport yaml\nimport base64\n\n\ndef yaml_test(path):\n    with open(path, 'r') as f:\n        result = yaml.safe_load(f)\n    return result\n\n\ndata = yaml_test('jianlong.yaml')\nprint(data)\n\nens = base64.encodebytes('hello world'.encode('utf-8'))\nresult1 = base64.decodebytes(ens)\nprint(result1.decode(encoding='UTF-8'))\n\nss = ['s', 'b', 'c']\nfor s, item in enumerate(ss):\n    print(s, item)\n"
  },
  'jianlong_test': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/jianlong_test': 'test'
  },
  'process_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/process_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nimport time\nimport multiprocessing\n\n\ndef work_a():\n    for i in range(0, 10):\n        if i == 8:\n            time.sleep(5)\n        else:\n            time.sleep(1)\n        print(str(i) + 'name is a' + str(os.getpid()))\n\n\ndef work_b():\n    for i in range(0, 10):\n        time.sleep(1)\n        print(str(i) + 'name is b' + str(os.getpid()))\n\n\nif __name__ == '__main__':\n    start = time.time()\n    a_p = multiprocessing.Process(target=work_a)\n    a_p.start()\n    b_p = multiprocessing.Process(target=work_b)\n    b_p.start()\n    # b_p.join()\n    a_p.join()\n    end = time.time()\n    print(end - start)\n"
  },
  'test2.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/test2.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\n\nimport multiprocessing\n\n\ndef main_test(num):\n    print('jianlong', num)\n\n\ndef run():\n    pool = multiprocessing.Pool(10)\n    pool.apply_async(func=main_test, args=('',))\n    pool.close()\n    pool.join()\n\n\nif __name__ == '__main__':\n    run()\n",
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/glob_test/test2.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nfrom glob import glob\nimport os\n\ndata_all = {}\n\n\ndef clear(path):\n    result = glob(os.path.join(path, \'*\'))\n    for data in result:\n        if os.path.isdir(data):\n            clear(data)\n        if os.path.isfile(data) and not data.endswith(".zip"):\n            name = os.path.split(data)[-1]\n            with open(data, \'r\') as f:\n                _content = f.read()\n            try:\n                if name in data_all:\n                    is_del = False\n                    for k, v in data_all[name].items():\n                        if _content == v:\n                            print(data + \'被删除\')\n                            os.remove(data)\n                            is_del = True\n                    if not is_del:\n                        data_all[name][data] = _content\n                else:\n                    data_all[name] = {\n                        data: _content\n                    }\n            except Exception as e:\n                print(\'error is in \', data, e, data_all[name])\n\n\ntarget = os.path.join("/Users/dongzhiqiao/Downloads/githubProject/python_second")\nclear(target)\nprint(data_all)\n',
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test2/test2.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport gevent\nimport random\n\nbeans = list(range(1, 52))\n\n\ndef a():\n    a_list = []\n    print('a function')\n    while len(beans) > 0:\n        num = random.choice(beans)\n        beans.remove(num)\n        a_list.append(num)\n        gevent.sleep(random.random())\n    if len(beans) == 0:\n        return a_list\n\n\ndef b():\n    b_list = []\n    print('b function')\n    while len(beans) > 0:\n        num = random.choice(beans)\n        beans.remove(num)\n        b_list.append(num)\n        gevent.sleep(random.random())\n    if len(beans) == 0:\n        return b_list\n\n\nif __name__ == '__main__':\n    g_a = gevent.spawn(a)\n    g_b = gevent.spawn(b)\n\n    result = gevent.joinall([g_a, g_b])\n    print(result[0].value, '\\n', result[1].value)\n",
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/holiday_test/test2.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport re\n\nlists = [\'131,0000,0001\',\n         \'131,0000,0002\',\n         \'131,0000,0003\',\n         \'131,0000,0004\',\n         \'131,0000,0005\']\nprint(list(map(lambda x: \'\'.join(x.split(\',\')), lists)))\n\ns = \'100\'  # 1-100内的任意数字\nret = re.match(\'(100|[1-9]\\n{0,1})$\', s)\nprint(ret.group())\n\nsss = \'my name is jianlong\'\nprint(re.findall(r\'\\w+ng\\b\', sss))\n\nprint(sss + \'\\b\')\n\ns = "我我...我我...我要..要要...要要...学学学...学学..Python...编编编..编程..程.程...程...程"\nprint(\'---\', re.findall(\'\\W+\', s, re.A))\nres = re.sub(r\'\\W+\', \'\', s)\nprint(res)\nret = re.sub(r\'(.)\\1+\', r\'\\1\', res)\nprint(ret)\n\ns2 = "我我...我我...我要..要要...要要...学学学...学学..Python...编编编..编程..程.程...程...程"\nres = re.sub(r\'\\W+\', \'\', s2)\nprint(res)\n\ntest2 = \'jjjiiiaaaalllooonnnggg\'\nprint(re.sub(r\'(\\w)\\1+\', r\'\\1\', test2))\n'
  },
  'test3.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/test3.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nfrom concurrent.futures import ThreadPoolExecutor\nimport threading\nimport random\n\n# 创建一个包含2条线程的线程池\npool = ThreadPoolExecutor(max_workers=2)  # 定义两个线程\n\n\ndef task(i):\n    sleep_seconds = random.randint(1, 3)  # 随机睡眠时间\n    print('线程名称：%s，参数：%s，睡眠时间：%s' % (threading.current_thread().name, i, sleep_seconds))\n\n\nfor i in range(10):  # 创建十个任务\n    future1 = pool.submit(task, i)\n",
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/test3.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nfrom functools import reduce\nimport json\n\ndata = filter(lambda x: x % 2 == 0, list(range(0, 51)))\nprint(list(data))\n\nlist_1 = map(lambda x: str(x).zfill(2), [1, 2, 3, 4])\n\nprint(list(list_1))\n\nlist_3 = map(lambda x: pow(x, 5), range(2, 13, 2))\nprint(tuple(list_3))\n\nlist_4 = reduce(lambda x, y: x * y, range(1, 21))\nprint(list_4)\n\n\n'
  },
  'newtest.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/newtest.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport multiprocessing\nimport json\nimport time\n\n\nclass Work(object):\n    def __init__(self, q):\n        self.q = q\n\n    def send(self, message):\n        if not isinstance(message, str):\n            self.q.put(json.dumps(message))\n        else:\n            self.q.put(message)\n\n    def resv(self):\n        while 1:\n            try:\n                q_str = self.q.get()\n                result = json.loads(q_str)\n            except Exception as e:\n                print(e)\n                result = q_str\n            print('resv is {}'.format(result))\n\n\nif __name__ == '__main__':\n    q = multiprocessing.Queue()\n    work = Work(q)\n    send_t = multiprocessing.Process(target=work.send, args=({'name': 'jianlong'},))\n    resv_t = multiprocessing.Process(target=work.resv)\n\n    send_t.start()\n    resv_t.start()\n\n    send_t.join()\n    resv_t.terminate()\n"
  },
  'thread_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/thread_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\nimport multiprocessing\n\nsugers = list(range(100))\n\n\ndef getsuger(child_list, child_num):\n    while len(sugers) > 0 and len(child_list) < 20:\n        one_suger = random.choice(sugers)\n        sugers.remove(one_suger)\n        child_list.append(one_suger)\n    print('第 %s 个孩子分到的糖果是 %s ' % (child_num, child_list))\n\n\nif __name__ == '__main__':\n    child = []\n    pool = multiprocessing.Pool(5)\n    for i in range(1, 6):\n        pool.apply_async(func=getsuger, args=(child, i,))\n    pool.close()\n    pool.join()\n"
  },
  'thread_test2.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/thread_test2.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\n# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndef get_sugar(child_list, child_num):\n    while len(sugars) > 0 and len(child_list) < 20:\n        one_sugar = random.choice(sugars)\n        sugars.remove(one_sugar)\n        child_list.append(one_sugar)\n    print('第 %s 个孩子分到的糖果是 %s \\n' % (child_num, child_list))\n\n\npool = ThreadPoolExecutor(max_workers=5)\nif __name__ == '__main__':\n    sugars = list(range(100))\n    for i in range(1, 6):\n        child = []\n        pool.submit(get_sugar, child, i)\n"
  },
  'Pool_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/Pool_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nimport multiprocessing\nimport random\nimport time\n\n\ndef test():\n    print('jianlong test')\n\n\ndef main_test(num, arg_lock):\n    arg_lock.acquire()\n    print(num, os.getpid())\n    test()\n    time.sleep(1)\n    arg_lock.release()\n    return 'jianlong'\n\n\nif __name__ == '__main__':\n    print(isinstance('', str))\n    print()\n\n    results = []\n    pool = multiprocessing.Pool(15)\n    manager = multiprocessing.Manager()\n    lock = manager.Lock()\n    for i in range(20):\n        res = pool.apply_async(func=main_test, args=(i, lock))\n        results.append(res)\n\n    pool.close()\n    pool.join()\n    for s in results:\n        print(s.get())\n"
  },
  'bools.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/bools.py': '# -*- coding: utf-8 -*-\nimport random\n\nlist1 = random.sample(range(1, 33), 6)\nlist1.append(random.randint(1, 16))\nprint(list(map(lambda x: str(x).zfill(2), list1)))\n'
  },
  'clear_json.json': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/glob_test/clear_json.json': '{\n  \'writejson.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/writejson.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport json, os\\n\\n\\ndef write_json(path, data):\\n    with open(path, \'w\') as f:\\n        if isinstance(data, dict):\\n            f.write(json.dumps(data))\\n        else:\\n            pass\\n    return True\\n\\n\\ndef read_json(path):\\n    with open(path, \'r\') as f:\\n        data = f.readlines()\\n        ss = \'\'\\n        for x in data:\\n            line = x.strip()\\n            if line != \'\':\\n                print(line)\\n                ss += line\\n    return json.loads(ss)\\n\\n\\ndata = {\'name\': \'小郭 \',\\n        \'age\': 26}\\n# write_json(\'test.json\', data)\\n\\nresult = read_json(\'test.json\')\\nprint(\'结果为\', result)\\n"\n  },\n  \'yaml_test.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/yaml_test.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport yaml\\nimport base64\\n\\n\\ndef yaml_test(path):\\n    with open(path, \'r\') as f:\\n        result = yaml.safe_load(f)\\n    return result\\n\\n\\ndata = yaml_test(\'jianlong.yaml\')\\nprint(data)\\n\\nens = base64.encodebytes(\'hello world\'.encode(\'utf-8\'))\\nresult1 = base64.decodebytes(ens)\\nprint(result1.decode(encoding=\'UTF-8\'))\\n\\nss = [\'s\', \'b\', \'c\']\\nfor s, item in enumerate(ss):\\n    print(s, item)\\n"\n  },\n  \'jianlong_test\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/jianlong_test\': \'test\'\n  },\n  \'process_test.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/process_test.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport os\\nimport time\\nimport multiprocessing\\n\\n\\ndef work_a():\\n    for i in range(0, 10):\\n        if i == 8:\\n            time.sleep(5)\\n        else:\\n            time.sleep(1)\\n        print(str(i) + \'name is a\' + str(os.getpid()))\\n\\n\\ndef work_b():\\n    for i in range(0, 10):\\n        time.sleep(1)\\n        print(str(i) + \'name is b\' + str(os.getpid()))\\n\\n\\nif __name__ == \'__main__\':\\n    start = time.time()\\n    a_p = multiprocessing.Process(target=work_a)\\n    a_p.start()\\n    b_p = multiprocessing.Process(target=work_b)\\n    b_p.start()\\n    # b_p.join()\\n    a_p.join()\\n    end = time.time()\\n    print(end - start)\\n"\n  },\n  \'test2.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/test2.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\n\\nimport multiprocessing\\n\\n\\ndef main_test(num):\\n    print(\'jianlong\', num)\\n\\n\\ndef run():\\n    pool = multiprocessing.Pool(10)\\n    pool.apply_async(func=main_test, args=(\'\',))\\n    pool.close()\\n    pool.join()\\n\\n\\nif __name__ == \'__main__\':\\n    run()\\n"\n  },\n  \'test3.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/test3.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nfrom concurrent.futures import ThreadPoolExecutor\\nimport threading\\nimport random\\n\\n# 创建一个包含2条线程的线程池\\npool = ThreadPoolExecutor(max_workers=2)  # 定义两个线程\\n\\n\\ndef task(i):\\n    sleep_seconds = random.randint(1, 3)  # 随机睡眠时间\\n    print(\'线程名称：%s，参数：%s，睡眠时间：%s\' % (threading.current_thread().name, i, sleep_seconds))\\n\\n\\nfor i in range(10):  # 创建十个任务\\n    future1 = pool.submit(task, i)\\n"\n  },\n  \'newtest.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/newtest.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport multiprocessing\\nimport json\\nimport time\\n\\n\\nclass Work(object):\\n    def __init__(self, q):\\n        self.q = q\\n\\n    def send(self, message):\\n        if not isinstance(message, str):\\n            self.q.put(json.dumps(message))\\n        else:\\n            self.q.put(message)\\n\\n    def resv(self):\\n        while 1:\\n            try:\\n                q_str = self.q.get()\\n                result = json.loads(q_str)\\n            except Exception as e:\\n                print(e)\\n                result = q_str\\n            print(\'resv is {}\'.format(result))\\n\\n\\nif __name__ == \'__main__\':\\n    q = multiprocessing.Queue()\\n    work = Work(q)\\n    send_t = multiprocessing.Process(target=work.send, args=({\'name\': \'jianlong\'},))\\n    resv_t = multiprocessing.Process(target=work.resv)\\n\\n    send_t.start()\\n    resv_t.start()\\n\\n    send_t.join()\\n    resv_t.terminate()\\n"\n  },\n  \'thread_test.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/thread_test.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport random\\nimport multiprocessing\\n\\nsugers = list(range(100))\\n\\n\\ndef getsuger(child_list, child_num):\\n    while len(sugers) > 0 and len(child_list) < 20:\\n        one_suger = random.choice(sugers)\\n        sugers.remove(one_suger)\\n        child_list.append(one_suger)\\n    print(\'第 %s 个孩子分到的糖果是 %s \' % (child_num, child_list))\\n\\n\\nif __name__ == \'__main__\':\\n    child = []\\n    pool = multiprocessing.Pool(5)\\n    for i in range(1, 6):\\n        pool.apply_async(func=getsuger, args=(child, i,))\\n    pool.close()\\n    pool.join()\\n"\n  },\n  \'thread_test2.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/thread_test2.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\n# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport random\\nfrom concurrent.futures import ThreadPoolExecutor\\n\\n\\ndef get_sugar(child_list, child_num):\\n    while len(sugars) > 0 and len(child_list) < 20:\\n        one_sugar = random.choice(sugars)\\n        sugars.remove(one_sugar)\\n        child_list.append(one_sugar)\\n    print(\'第 %s 个孩子分到的糖果是 %s \\\\n\' % (child_num, child_list))\\n\\n\\npool = ThreadPoolExecutor(max_workers=5)\\nif __name__ == \'__main__\':\\n    sugars = list(range(100))\\n    for i in range(1, 6):\\n        child = []\\n        pool.submit(get_sugar, child, i)\\n"\n  },\n  \'Pool_test.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test/Pool_test.py\': "# -*- coding: utf-8 -*-\\n# Auther : jianlong\\nimport os\\nimport multiprocessing\\nimport random\\nimport time\\n\\n\\ndef test():\\n    print(\'jianlong test\')\\n\\n\\ndef main_test(num, arg_lock):\\n    arg_lock.acquire()\\n    print(num, os.getpid())\\n    test()\\n    time.sleep(1)\\n    arg_lock.release()\\n    return \'jianlong\'\\n\\n\\nif __name__ == \'__main__\':\\n    print(isinstance(\'\', str))\\n    print()\\n\\n    results = []\\n    pool = multiprocessing.Pool(15)\\n    manager = multiprocessing.Manager()\\n    lock = manager.Lock()\\n    for i in range(20):\\n        res = pool.apply_async(func=main_test, args=(i, lock))\\n        results.append(res)\\n\\n    pool.close()\\n    pool.join()\\n    for s in results:\\n        print(s.get())\\n"\n  },\n  \'bools.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/bools.py\': \'# -*- coding: utf-8 -*-\\nimport random\\n\\nlist1 = random.sample(range(1, 33), 6)\\nlist1.append(random.randint(1, 16))\\nprint(list(map(lambda x: str(x).zfill(2), list1)))\\n\'\n  },\n  \'test1.py\': {\n    \'/Users/dongzhiqiao/Downloads/githubProject/python_second/glob_test/test1.py\': \'# -*- coding: utf-8 -*-\\n# Auther : jianlong\\n\\nimport os\\nfrom glob import glob\\n\\ntarget = os.getcwd()\\n\\n\\ndef get_file(path):\\n    result = glob(os.path.join(path, \\\'*\\\'))\\n    for data in result:\\n        if os.path.isdir(data):\\n            get_file(data)\\n        if os.path.isfile(data):\\n            print(data)\\n\\n\\ndef get_file_test(path, search_text):\\n    result = glob(os.path.join(path, \\\'*\\\'))\\n    for data in result:\\n        if os.path.isdir(data):\\n            get_file_test(data, search_text)\\n        if os.path.isfile(data) and not data.endswith(".zip"):\\n            with open(data, \\\'r\\\') as f:\\n                content = f.read()\\n                if search_text in content:\\n                    print(data)\\n\\n\\n# get_file(\\\'/Users/dongzhiqiao/Downloads/githubProject/python_second\\\')\\n# get_file_test(\\\'/Users/dongzhiqiao/Downloads/githubProject/python_second\\\', \\\'admin\\\')\\n\'\n  }\n}\n'
  },
  'test1.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/glob_test/test1.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\n\nimport os\nfrom glob import glob\n\ntarget = os.getcwd()\n\n\ndef get_file(path):\n    result = glob(os.path.join(path, \'*\'))\n    for data in result:\n        if os.path.isdir(data):\n            get_file(data)\n        if os.path.isfile(data):\n            print(data)\n\n\ndef get_file_test(path, search_text):\n    result = glob(os.path.join(path, \'*\'))\n    for data in result:\n        if os.path.isdir(data):\n            get_file_test(data, search_text)\n        if os.path.isfile(data) and not data.endswith(".zip"):\n            with open(data, \'r\') as f:\n                content = f.read()\n                if search_text in content:\n                    print(data)\n\n\n# get_file(\'/Users/dongzhiqiao/Downloads/githubProject/python_second\')\n# get_file_test(\'/Users/dongzhiqiao/Downloads/githubProject/python_second\', \'admin\')\n',
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/async_test2/test1.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport asyncio\nimport time\nimport random\n\n\nasync def a():\n    for i in range(10):\n        print(i, 'a')\n        await asyncio.sleep(random.randint(1, 4))\n    return 'a function'\n\n\nasync def b():\n    for i in range(10):\n        print(i, 'b')\n        await asyncio.sleep(random.randint(1, 4))\n    return 'b function'\n\n\nasync def run_all():\n    result = await asyncio.gather(a(), b())\n    print(result)\n\n\nif __name__ == '__main__':\n    asyncio.run(run_all())\n",
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/holiday_test/test1.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport re\n\nstr1 = \'jianlong@qq.com\'\nlist = (re.findall(\'\\w*\', str1))\nprint(list)\n\nstr2 = \'I don\\\'t want to be your entire world, just the best thing in it, I want to say "$%^&*@#~!".\'\nstr3 = \'12i3 love 34you3 not 56because of 7who3 119 df44\'\nlis2 = re.findall(\'["]\\W+["]\', str2)\nprint(lis2[0])\n\nlis3 = re.findall(\'\\d+\\w+\\d+\', str3)\nprint(lis3)\n\nlis4 = re.findall(\'I .*(I wan.*say)\', str2)\nprint(lis4[0])\n\nemail1 = \'lianflower@163.com\'\nemail2 = \'11123433@qq.com\'\nemail3 = \'xinlang@sina.com\'\nprint(re.findall(\'(.*)@.*\\..*\', email1))\nprint(re.search(\'.*@(.*)\\..*\', email1).group(1))\nprint(re.search(\'.*@(.*)\\..*\', email2).group(1))\nprint(re.search(\'.*@(.*)\\..*\', email3).group(1))\n\nstr_data = \'hello world\'\nprint(re.split(\'o\\Ww\', str_data))\n\nprint(\'findall----\', re.findall(\'fl(.*)\', email1))\nprint(\'match----\', re.match(\'.*fl(.*)\', email1))\nprint(\'split----\', re.split(\'fl(.*)\', email1))\nprint(\'search----\', re.search(\'fl(.*)\', email1).groups())\n\nksf = \'康师傅, 康帅傅, 康师傅, 康帅傅, 康帅傅, 康师傅, 康帅傅, 康师傅, 康帅傅, 康师傅\';\nprint(len(re.findall(\'[^康师傅, ]\', ksf)))\n\na = \'康帅傅, 康师傅, 康帅傅, 康师傅, 康帅傅, 康帅傅, 康师傅, 康帅傅, 康师傅, 康帅傅, 康师傅\'\nstr_test = a.replace(\'康师傅, \', \'\').replace(\', 康师傅\', \'\')\nprint(str_test)\na1 = re.findall(\'康师傅,*\\s*\', a)\nprint(a1)\nprint(\'小慕买到了{}包山寨方便面\'.format(len(a1)))\n',
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/fileutils/unzip/test1.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nfrom shutil import copy, move, make_archive\n\npath = os.getcwd()\n\ncopy('test1.txt', 'test1')\n\n#move('move.txt', 'test1/move2')\n\nmake_archive('test1', 'zip', os.getcwd())\n",
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/fileutils/test1.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nfrom shutil import copy, move, make_archive, unpack_archive, copytree\n\npath = os.getcwd()\n\ncopy('test1.txt', 'test1')\n\n# move('move.txt', 'test1/move2')\n\n# make_archive('test1', 'zip', os.getcwd())\n# unpack_archive('test1.zip', 'unzip')\n\n# make_archive('test1.txt', 'zip', os.getcwd())\n# unpack_archive('test1.txt.zip', os.path.join(os.getcwd(), 'unzip2'))\n# copytree('unzip', 'unzip2')\nmove('test1.zip', 'test1/test6.zip')\n"
  },
  'test.json': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/test.json': '{\n  "name": "\\u5c0f\\u90ed",\n  "age": 26,\n  "sexy": "boy"\n}'
  },
  'test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/test.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport json\n\nset1 = ["1", "2", "4", "1"]\nprint(set1, type(set1))\nset1_json = json.dumps(set1)\nprint(set1_json, type(set1_json))\n\nstr_set1 = json.dumps(set1)\nprint(str_set1)\nstr_obj = json.loads(str_set1)\nprint(str_obj, type(str_obj))\n\nstr3 = \'s\'\nstr_1 = json.dumps(str3)\nstr4 = json.loads(str_1)\nprint(str4)\n\nset2 = set([1, 2, 3, 4])\nprint(set2)\n\nlist_teest1 = {1: {"name": "jianlong"}, 3: {"name": "jianlong"}, 11: {"name": "jianlong"},\n               22: {"name": "jianlong"}}\nresult=json.dumps(list_teest1)\n\nprint(json.loads(result))\n\n'
  },
  'log_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/log_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport logging\nfrom ColorInfo import ColorLogger\n\n# logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(filename)s [line:%(lineno)s] %(levelname)s %(message)s')\n# logging.info('jianlong')\n\nlogger = ColorLogger(file='log.txt', txt=True, cover=True)\nlogger.info('name is {} {}'.format('Jianlong', '27'))\nlogger.warning('name is {} {}'.format('Jianlong', '27'))\nlogger.error('name is {} {}'.format('Jianlong', '27'))\n\n"
  },
  'README.md': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/README.md': '# python_second\npython the second\n'
  },
  'work.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/work.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\n\n\ndef test():\n    while True:\n        yours = input('请输入你的选择')\n        computer = random.randint(0, 2)\n        print('你的选择{}     机器的选择{}'.format(yours, computer))\n\n        if yours == computer:\n            print('平局')\n        if (int(yours) + 1) % 3 == computer:\n            print('你赢了')\n        else:\n            print('你输了')\n\n\ntest()\n"
  },
  'user.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/user.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nimport random\n\nfrom price.base import Base\nfrom price.common import utils\n\n\nclass User(Base):\n    def __init__(self, username, user_json, gift_json):\n        self.username = username\n        super().__init__(user_json, gift_json)\n        self.get_user()\n        self.gift_random = list(range(1, 101))\n\n    def get_user(self):\n        users = self._Base__read_users()\n        current_user = users.get(self.username)\n        if current_user is None:\n            raise Exception('get user error there is not user %s' % self.username)\n\n        if current_user.get('role') != 'normal':\n            raise Exception('%s is not normal role' % self.username)\n\n        if current_user.get('active') is False:\n            raise Exception('%s is not active' % self.username)\n        self.user = current_user\n        self.username = current_user.get('username')\n        self.role = current_user.get('role')\n        self.gifts = current_user.get('gifts')\n        self.create_time = utils.timestamp_to_string(current_user.get('create_time'))\n\n    def get_gifts(self):\n        gifts = self._Base__read_gifts()\n        gift_lift = []\n        for key1, value1 in gifts.items():\n            for key2, value2 in value1.items():\n                for k, v in value2.items():\n                    gift_lift.append(v.get('name'))\n        return gift_lift\n\n    def choice_gift(self):\n        gifts = self._Base__read_gifts()\n        level_one_num = random.choice(self.gift_random)\n        level_two_num = random.choice(self.gift_random)\n\n        level_first, level_second = None, None\n        if level_one_num < 50:\n            level_first = 'level1'\n        elif 50 < level_one_num < 80:\n            level_first = 'level2'\n        elif 80 < level_one_num < 94:\n            level_first = 'level3'\n        else:\n            level_first = 'level4'\n\n        if level_two_num < 50:\n            level_second = 'level1'\n        elif 50 < level_two_num < 80:\n            level_second = 'level2'\n        else:\n            level_second = 'level3'\n        gift_info = gifts[level_first][level_second]\n        if len(gift_info) == 0:\n            print('您没有中奖')\n            return\n        last_gift_infos = [v for k, v in gift_info.items()]\n        last_gift = random.choice(last_gift_infos)\n        if last_gift.get('count') == 0:\n            print('您没有中奖')\n            return\n        print('抽中%s' % last_gift.get('name'))\n        last_gift['count'] = int(last_gift['count']) - 1\n        gifts[level_first][level_second][last_gift.get('name')] = last_gift\n        self._Base__change_attr(self.gift_json, gifts)\n        self.user['gifts'].append(last_gift['name'])\n        self.__update()\n\n    def __update(self):\n        users = self._Base__read_users()\n        users[self.username] = self.user\n        self._Base__change_attr(self.user_json, users)\n\n\nif __name__ == '__main__':\n    user_path = os.path.join(os.getcwd(), 'storage', 'user.json')\n    gift_path = os.path.join(os.getcwd(), 'storage', 'gift.json')\n    user = User('jianlong3', user_path, gift_path)\n    user.choice_gift()\n"
  },
  '__init__.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/__init__.py': ' # -*- coding: utf-8 -*-\n# Auther : jianlong',
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/common/__init__.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong'
  },
  'gift.json': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/storage/gift.json': '{\n  "level1": {\n    "level1": {\n      "Mac": {\n        "name": "Mac",\n        "count": 0\n      },\n      "Watch": {\n        "name": "Watch",\n        "count": 3\n      }\n    },\n    "level2": {\n      "iPad mini": {\n        "name": "iPad mini",\n        "count": "4"\n      }\n    },\n    "level3": {\n      "iPad Pro": {\n        "name": "iPad Pro",\n        "count": "4"\n      }\n    }\n  },\n  "level2": {\n    "level1": {},\n    "level2": {\n      "iPad": {\n        "name": "iPad",\n        "count": 2\n      },\n      "iPhone": {\n        "name": "iPhone",\n        "count": 3\n      }\n    },\n    "level3": {}\n  },\n  "level3": {\n    "level1": {},\n    "level2": {},\n    "level3": {}\n  },\n  "level4": {\n    "level1": {},\n    "level2": {},\n    "level3": {\n      "tv": {\n        "name": "tv",\n        "count": "4"\n      }\n    }\n  }\n}'
  },
  'user.json': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/storage/user.json': '{\n  "jianlong": {\n    "username": "jianlong",\n    "role": "admin",\n    "active": true,\n    "create_time": 1687606999.584152,\n    "update_time": 1687607066.6302888,\n    "gifts": []\n  },\n  "jianlong2": {\n    "username": "jianlong2",\n    "role": "admin",\n    "active": true,\n    "create_time": 1688302047.6729789,\n    "update_time": 1688302047.6729789,\n    "gifts": []\n  },\n  "jianlong3": {\n    "username": "jianlong3",\n    "role": "normal",\n    "active": true,\n    "create_time": 1688302192.863652,\n    "update_time": 1689089912.395416,\n    "gifts": [\n      "Mac mini",\n      "mac",\n      "iPad",\n      "iPad",\n      "watch",\n      "iPhone",\n      "iPhone",\n      "iPhone",\n      "iPhone",\n      "iPhone",\n      "Mac",\n      "Mac",\n      "iPhone",\n      "Mac",\n      "Mac",\n      "Mac",\n      "iPhone",\n      "Watch"\n    ]\n  }\n}'
  },
  'error.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/common/error.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nclass NotPathError(Exception):\n    def __init__(self, message='path is undefined'):\n        self.message = message\n\n\nclass FileFormatError(Exception):\n    def __init__(self, message='is not json file'):\n        self.message = message\n\n\nclass NotFileError(Exception):\n    def __init__(self, message='file is undefined'):\n        self.message = message\n\n\nclass UserExistError(Exception):\n    def __init__(self, message):\n        self.message = message\n"
  },
  'consts.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/common/consts.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nROLES = ['admin', 'nomal']\nF_LEVEL = ['level1', 'level2', 'level3', 'level4']\nS_LEVEL = ['level1', 'level2', 'level3']\n"
  },
  'utils.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/common/utils.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\n\nfrom price.common import error\nimport time\n\n\ndef check(path):\n    if not os.path.isfile(path):\n        raise error.NotFileError()\n    if not os.path.exists(path):\n        raise error.NotPathError()\n    if not path.endswith(\'.json\'):\n        raise error.FileFormatError()\n\n\ndef timestamp_to_string(timestamp):\n    time_obj = time.localtime(timestamp)\n    time_string = time.strftime("%Y-%m-%d %H:%M:%S", time_obj)\n    return time_string\n'
  },
  'admin.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/admin.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\n\nfrom price.base import Base\n\n\nclass Admin(Base):\n    def __init__(self, username, user_json, gift_json):\n        self.username = username\n        super().__init__(user_json=user_json, gift_json=gift_json)\n        self.get_user()\n\n    def get_user(self):\n        users = self._Base__read_users()\n        current_user = users.get(self.username)\n        if current_user is None:\n            raise Exception('current_user is none %s' % self.username)\n        if current_user.get('active') is False:\n            raise Exception('active is  false')\n        if current_user.get('role') != 'admin':\n            raise Exception('%s is not admin' % current_user.get('username'))\n        self.user = current_user\n        self.role = current_user.get('role')\n        self.name = current_user.get('username')\n        self.active = current_user.get('active')\n\n    def add_user(self, username, role):\n        self.get_user()\n        if self.role != 'admin':\n            raise Exception('is not admin')\n        self._Base__write_user(username=username, role=role)\n\n    def __check(self):\n        self.get_user()\n        if self.role != 'admin':\n            raise Exception('is not admin')\n\n    def change_active(self, username):\n        self.__check()\n        self._Base__change_active(username=username)\n\n    def change_role(self, username, role):\n        self.__check()\n        self._Base__change_role(username=username, role=role)\n\n    def add_gift(self, first_level, second_level, name, count):\n        self.__check()\n        self._Base__write_level(first_level=first_level, second_level=second_level, name=name, count=count)\n\n    def delete_gift(self, first_level, second_level, name):\n        self.__check()\n        self._Base__delete_gift(first_level=first_level, second_level=second_level, name=name)\n\n    def gift_update(self, first_level, second_level, name, count):\n        self.__check()\n        self._Base__gift_update(first_level=first_level, second_level=second_level, name=name, count=count,\n                                is_admin=True)\n\n\nif __name__ == '__main__':\n    user_path = os.path.join(os.getcwd(), 'storage', 'user.json')\n    gift_path = os.path.join(os.getcwd(), 'storage', 'gift.json')\n    admin = Admin('jianlong', user_path, gift_path)\n    admin.change_role('jianlong3', 'normal')\n    admin.add_gift(first_level='level1', second_level='level2', name='Mac mini', count=233)\n"
  },
  'base.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price/base.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\nimport time\n\nfrom price.common import utils, consts\n\nimport json\n\nfrom price.common.consts import F_LEVEL, S_LEVEL\nfrom price.common.error import UserExistError\n\n\nclass Base(object):\n    def __init__(self, user_json, gift_json):\n        self.user_json = user_json\n        self.gift_json = gift_json\n        self.check()\n\n    def check(self):\n        self.__check_user()\n        self.__check_gift()\n        self.__init_gifts()\n\n    def __check_user(self):\n        utils.check(self.user_json)\n\n    def __check_gift(self):\n        utils.check(self.gift_json)\n\n    def __read_users(self, time_to_str=False):\n        with open(self.user_json, 'r') as f:\n            data = json.loads(f.read())\n\n        if time_to_str:\n            for k, v in data.items():\n                v['create_time'] = utils.timestamp_to_string(v['create_time'])\n                v['update_time'] = utils.timestamp_to_string(v['update_time'])\n                data[k] = v\n        return data\n\n    def __write_user(self, **user):\n        if 'username' not in user:\n            raise ValueError('missing username')\n        if 'role' not in user:\n            raise ValueError('missing role')\n        user['active'] = True\n        user['create_time'] = time.time()\n        user['update_time'] = time.time()\n        user['gifts'] = []\n\n        users = self.__read_users()\n\n        if user['username'] in users:\n            raise UserExistError('username %s is exist' % user['username'])\n\n        users.update(\n            {user['username']: user}\n        )\n\n        json_users = json.dumps(users)\n        with open(self.user_json, 'w') as f:\n            f.write(json_users)\n\n    def __change_role(self, username, role):\n        users = self.__read_users()\n        if username not in users:\n            raise Exception('no username')\n        if role not in consts.ROLES:\n            raise Exception('role is error ')\n        user = users.get(username)\n        user['role'] = role\n        user['update_time'] = time.time()\n        users[username] = user\n        self.__change_attr(self.user_json, users)\n\n    def __change_active(self, username):\n        users = self.__read_users()\n        if username not in users:\n            raise Exception('no username')\n        user = users.get(username)\n        user['active'] = not user['active']\n        user['update_time'] = time.time()\n        users[username] = user\n        self.__change_attr(self.user_json, users)\n\n    def __delete_user(self, username):\n        users = self.__read_users()\n        if username not in users:\n            raise Exception('no username')\n        users.pop(username)\n        self.__change_attr(self.user_json, users)\n\n    @staticmethod\n    def __change_attr(path, info):\n        json_str = json.dumps(info)\n        with open(path, 'w') as f:\n            f.write(json_str)\n        return True\n\n    def __read_gifts(self):\n        with open(self.gift_json, 'r') as f:\n            data = json.loads(f.read())\n        return data\n\n    def __init_gifts(self):\n        data = {\n            'level1': {\n                'level1': {},\n                'level2': {},\n                'level3': {},\n\n            }, 'level2': {\n                'level1': {},\n                'level2': {},\n                'level3': {},\n\n            }, 'level3': {\n                'level1': {},\n                'level2': {},\n                'level3': {},\n\n            }, 'level4': {\n                'level1': {},\n                'level2': {},\n                'level3': {},\n\n            }}\n        read_data = self.__read_gifts()\n        if len(read_data) != 0:\n            return\n        with open(self.gift_json, 'w')as f:\n            f.write(json.dumps(data))\n\n    def __write_level(self, first_level, second_level, name, count):\n        gifts = self.__gift_check(first_level, second_level)\n        gift_pool = gifts[first_level]\n        second_gift_pool = gift_pool[second_level]\n        if count == 0:\n            count = 1\n        if name in second_gift_pool:\n            current_count = int(second_gift_pool[name]['count'])\n            current_count += int(count)\n            second_gift_pool[name]['count'] = current_count\n        else:\n            second_gift_pool[name] = {\n                'name': name,\n                'count': count\n            }\n        gift_pool[second_level] = second_gift_pool\n        gifts[first_level] = gift_pool\n        self.__change_attr(self.gift_json, gifts)\n\n    def __gift_check(self, first_level, second_level):\n        if first_level not in F_LEVEL:\n            raise Exception('first_level is undefined')\n        if second_level not in S_LEVEL:\n            raise Exception('second_level is undefined')\n        gifts = self.__read_gifts()\n        return gifts\n\n    def __gift_update(self, first_level, second_level, name, count=1, is_admin=False):\n        assert isinstance(count, int), 'gift count is int'\n        gifts = self.__gift_check(first_level, second_level)\n        current_count = int(gifts[first_level][second_level][name]['count'])\n        if is_admin:\n            if count <= 0:\n                raise Exception('gift count is error')\n            current_count = count\n        else:\n            if current_count < int(count):\n                raise Exception('gift count is error')\n            current_count -= int(count)\n        gifts[first_level][second_level][name]['count'] = current_count\n        self.__change_attr(self.gift_json, gifts)\n\n    def __delete_gift(self, first_level, second_level, name):\n        gifts = self.__gift_check(first_level, second_level)\n        if name in gifts[first_level][second_level]:\n            delete_data = gifts[first_level][second_level].pop(name)\n            self.__change_attr(self.gift_json, gifts)\n        return delete_data\n\n\nif __name__ == '__main__':\n    user_path = os.path.join(os.getcwd(), 'storage', 'user.json')\n    gift_path = os.path.join(os.getcwd(), 'storage', 'gift.json')\n\n    base = Base(user_path, gift_path)\n    base.write_level('level1', 'level3', 'iPad Pro', '4')\n    # result = base.delete_gift('level4', 'level3', 'iPad')\n    # print(result)\n    # result = base.read_gifts()\n    # print(result)\n    # base.write_user(username='jianlong', role='admin')\n    # base.change_role(username='jianlong', role='nomal')\n"
  },
  'os_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/os_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport os\n\nprint(os.getcwd() + '/second.test')\nwith open(os.getcwd() + '/second.test', 'r') as f:\n# f.write('hello jianlong')\n# f.seek(0)\n    result = f.read()\n    print(result)\n    print('-------')\n    f.seek(0)\n    results = f.readlines()\n    print(results)\n    print(f.name)\nprint(f.closed)\n"
  },
  'fu_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/fu_test.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\n\nhappy = [\n    {"name": "富强福", "num": 0},\n    {"name": "和谐福", "num": 0},\n    {"name": "友善福", "num": 0},\n    {"name": "爱国福", "num": 0},\n    {"name": "敬业福", "num": 0}\n]\n\nwhile not all(list(map(lambda x: x["num"], happy))):\n    start = input("按下<Enter>键集五福，迎新春")\n    if isinstance(start, str):\n        random.choice(happy)["num"] += 1\n        print("当前拥有的福:")\n        for kws in happy:\n            print(kws["name"], ":", kws["num"], end="\\t\\t")\nprint("集齐五福了～\\n")\nexit(0)\n'
  },
  'quene_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/quene_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport multiprocessing\nimport json\nimport threading\nimport time\n\n\ndef send(q):\n    for message in range(1, 11):\n        if not isinstance(message, str):\n            result = json.dumps(message)\n        else:\n            result = message\n        q.put(result)\n\n\ndef resv(q, name):\n    while 1:\n        try:\n            res = json.loads(q.get())\n            time.sleep(1)\n        except Exception as e:\n            print(e)\n        print('第%s个蛋糕被%s吃掉了' % (res, name))\n\n\nif __name__ == '__main__':\n    quene = multiprocessing.Queue()\n    mumu = threading.Thread(target=send, args=(quene,))\n    xiaoming = threading.Thread(target=resv, args=(quene, '小明',))\n    xiaohong = threading.Thread(target=resv, args=(quene, '小红',))\n    anan = threading.Thread(target=resv, args=(quene, '安安',))\n    mumu.start()\n    xiaoming.start()\n    xiaohong.start()\n    anan.start()\n"
  },
  'test1.txt': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/fileutils/test1.txt': 'jianlong'
  },
  'move2': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/fileutils/unzip/test1/move2': 'sss'
  },
  'jianlong_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/jianlong_test.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport yaml\nimport log_color\nfrom ColorInfo import ColorLogger\n\n\nclass Jianlong(object):\n\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n\njianlong = Jianlong('name', 27)\nprint(getattr(jianlong, 'a'))\nsetattr(jianlong, 'sex', 'man')\nprint(getattr(jianlong, 'sex'))\nprint(vars(jianlong))\nprint(hasattr(jianlong, 'sex'))\nlog = ColorLogger()\nlog.info(str(vars(jianlong)))\n\nss = ['1', '2', '3,4', 4, 5]\nfor i in enumerate(ss):\n    print(i)\n"
  },
  'jianlong.yaml': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/jianlong.yaml': 'name:\n  jianlong\nage:\n  27\naihao:\n  - girl\n  - luoli'
  },
  'inter.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/inter.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nlist1 = [{'name': 'jianlong', 'age': 27}, {'name': 'xiaoguo', 'age': 26}, {'name': 'xiaoguo2', 'age': 26}]\niters = iter(list1)\nresult = next(iters)\nresult2 = next(iters)\nprint(result)\nprint(result2)\n\n\ndef test():\n    for i in list1:\n        yield i\n\n\ntest_result = test()\nt1 = next(test_result)\nt2 = next(test_result)\nprint(t1, t2)\n\nres = (i['name'] for i in list1)\nprint(next(res))\nprint(next(res))\nprint(next(res))\n\nres4 = filter(lambda x: x['name'] == 'jianlong', list1)\n\nprint('res4', list(res4))\n"
  },
  'teacher.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/school/teacher.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nclass Teacher(object):\n    def __init__(self, no, name, phone_no):\n        self.no = no\n        self.name = name\n        self.phone_no = phone_no\n\n    def str(self):\n        return 'name:{},s_number:{}'.format(self.name, self.no)\n"
  },
  'course.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/school/course.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport json\n\n\nclass Course(object):\n    def __init__(self, no, name, teacher=None):\n        self.no = no\n        self.name = name\n        self.teacher = teacher\n\n    def binding(self, teacher):\n        if teacher is not None and teacher.no != '':\n            self.teacher = teacher\n        else:\n            return None\n\n    def str(self):\n        course_dect = {'课程名称': self.name, '教师名称': self.teacher.name}\n        return course_dect\n"
  },
  'example.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/school/example.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\n\nfrom school.course import Course\nfrom school.student import Student\nfrom school.teacher import Teacher\n\n\ndef introduction(str):\n    first_title = \'******\' + str + \'学生信息\' + \'** ** **\'\n    is_student = create_student()\n    c_t = course_to_teacher()\n    second_title = \'******\' + str + \'选课结果\' + \'** ** **\'\n    for i in range(len(is_student)):\n        if i == 0:\n            print(first_title)\n        is_student[i].add_course(c_t[len(is_student) - 1 - i])\n        if i == 2:\n            is_student[i].add_course(c_t[3])\n        print(is_student[i].str())\n    print(second_title)\n    for k in range(len(is_student)):\n        print(is_student[k].course_detail())\n\n\ndef prepare_course():\n    course_infos = []\n    courses = {}\n    courses[\'01\'] = \'网络爬虫\'\n    courses[\'02\'] = \'数据分析\'\n    courses[\'03\'] = \'人工智能\'\n    courses[\'04\'] = \'机器学习\'\n    courses[\'05\'] = \'云计算\'\n    courses[\'06\'] = \'大数据\'\n    courses[\'07\'] = \'图像识别\'\n    courses[\'08\'] = \'Web开发\'\n    for k, w in courses:\n        course_i = Course(k, w)\n        course_infos.append(course_i)\n    return course_infos\n\n\ndef create_teacher():\n    teachers = []\n    str_out = str(\'T1, 张亮, 13301122001\\n\' +\n                  \'T2, 王朋, 13301122002\\n\' +\n                  \'T3, 李旭, 13301122003\\n\' +\n                  \'T4, 黄国发, 13301122004\\n\' +\n                  \'T5, 周勤, 13301122005\\n\' +\n                  \'T6, 谢富顺, 13301122006\\n\' +\n                  \'T7, 贾教师, 13301122007\\n\' +\n                  \'T8, 杨教师, 13301122008\\n\')\n    strs = str_out.split(\'\\n\')\n    for s in strs:\n        str_in = s.split(\', \')\n        if len(str_in) == 3:\n            teacher = Teacher(str_in[0], str_in[1], str_in[2])\n            teachers.append(teacher)\n    return list(teachers)\n\n\ndef create_student():\n    students = []\n    s_str = "小亮, 小明, 李红, 小丽, Jone, 小彤, 小K, 慕慕".split(\', \')\n    for i in range(len(s_str)):\n        no = random.randint(1000, 1007)\n        name = s_str[i]\n        student = Student(no, name)\n        students.append(student)\n    return students\n\n\ndef course_to_teacher():\n    lists = []\n    ls_course = prepare_course()\n    ls_teacher = create_teacher()\n    for i in range(len(ls_course)):\n        ls_course[i].binding(ls_teacher[i])\n        lists.append(ls_course[i])\n    return lists\n'
  },
  'file_exe.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/school/file_exe.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nfrom school.example import introduction\n\nif __name__ == '__main__':\n    introduction('幕课学院')\n"
  },
  'student.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/school/student.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport json\n\n\nclass Student(object):\n    def __init__(self, s_number='', name='', courses=[]):\n        self.s_number = s_number\n        self.name = name\n        self.courses = courses\n\n    def course_detail(self):\n        lists = []\n        for s_c in self.courses:\n            s_c_str = s_c.str()\n            lists.append(s_c_str)\n\n        return 'Name:{} , Selected:{}'.format(self.name, str(lists))\n\n    def add_course(self, cour_info):\n        if len(self.courses) == 0:\n            ss = [cour_info]\n            self.courses = ss\n        else:\n            self.courses.append(cour_info)\n\n    def str(self):\n        return 'name:{},s_number:{}'.format(self.name, self.s_number)\n"
  },
  'ramdom_test.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/ramdom_test.py': '# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\n\ntest_l = (\'dsa\', \'rwer\', \'tewr\')\ntest_t = (1, 4, 5, 6, 78, 543, 123, 3432)\ntest_d = {\'name\': "jianlong", \'age\': 27}\nprint(random.random())\nprint(random.randint(1, 3))\nprint(random.choice(test_t))\nprint(random.uniform(90, 99))\n'
  },
  'price.py': {
    '/Users/dongzhiqiao/Downloads/githubProject/python_second/price.py': "# -*- coding: utf-8 -*-\n# Auther : jianlong\nimport random\nimport threading\n\nlists = list(range(1, 21))\nlock = threading.Lock()\n\n\ndef get_price(i):\n    lock.acquire()\n    if 1 not in lists and 2 not in lists and 3 not in lists:\n        print('抽奖结束了')\n    result = random.choice(lists)\n    lists.remove(result)\n    if result == 1:\n        print('手机号码为%s的用户抽中一等奖：手机，价值3999元' % i)\n    elif result == 2:\n        print('手机号码为%s的用户抽中二等奖：平板电脑，价值1999元' % i)\n    elif result == 3:\n        print('手机号码为%s的用户抽中三等奖：加湿器，价值198元' % i)\n    lock.release()\n\n\nif __name__ == '__main__':\n    for i in range(1, 21):\n        thr = threading.Thread(target=get_price, args=(random.randint(13000000000, 18000000000),))\n        thr.start()\n"
  }
}
